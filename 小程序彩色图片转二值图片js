//获取图片
img(){
  wx.chooseImage({
    success(res) {
  let cfg = {x: 0,y: 0,width:300,height:300,}//canvsa数据
  let canvas = wx.createCanvasContext('canvasIn',this);//创建canvas
  let urld = res.tempFilePaths[0];//图片数据
  canvas.drawImage(urld, 0, 0,300,300);
  canvas.draw();
  setTimeout(
    function(){
      wx.canvasGetImageData({
        canvasId: 'canvasIn', ...cfg,
        success(res) {
          let data = that.convert4to1(res.data);//灰值图片数据
          let nThresh=tthis.OTSUAlgorithm(arr,width,height)//最优阀值
          console.log(nThresh)
          for(let i=0;i<arr.length;i=i+4){//灰值转二值数据
            if(arr[i]>nThresh){arrs.push(0)}
            else { arrs.push(1)}
          }
        },
        fail: function (error) {
          // console.log("error:" + error);
        }
      })
      setTimeout(function(){
      // item.image = res.tempFilePaths[0];
      ++allImageCount
      item = Object.assign({}, that.data.baseCircleData);
      items.push(item);
      that.setData({
        allList: items
      })
      },500)
    },100
    );
  
    },
    fail:(res)=>{
      wx.showToast({
        title: '图片加载失败，请重新选择',
        icon: 'none',
        duration: 2000
      });
    }
  })
},
 //4合1 将彩色图形转为灰值图形
 convert4to1(data) {
  let g = 0
  for (let i = 0; i < data.length; i += 4) {
    g = (data[i] * 0.299 + data[i + 1] * 0.587 + data[i + 2] * 0.114)
    data[i] = g
    data[i + 1] = g
    data[i + 2] = g
  }
  return data
},
//获取最优阙值
OTSUAlgorithm(pixels,width,height){
  var m_pFstdHistogram = new Array();//表示灰度值的分布点概率
  var m_pFGrayAccu = new Array();//其中每一个值等于m_pFstdHistogram中从0到当前下标值的和
  var m_pFGrayAve = new Array();//其中每一值等于m_pFstdHistogram中从0到当前指定下标值*对应的下标之和
  var m_pAverage=0;//值为m_pFstdHistogram【256】中每一点的分布概率*当前下标之和
  var m_pHistogram = new Array();//灰度直方图
  var i,j;
  var temp=0,fMax=0;//定义一个临时变量和一个最大类间方差的值
  var nThresh = 0;//最优阀值
  //初始化各项参数
  for(i=0; i<256; i++){
    m_pFstdHistogram[i] = 0;
    m_pFGrayAccu[i] = 0;
    m_pFGrayAve[i] = 0;
    m_pHistogram[i] = 0;
  }
  //下面统计图像的灰度分布信息
  for(i=0; i<pixels.length; i+=4){
     //获取r的像素值，因为灰度图像，r=g=b，所以取第一个即可
     var r = pixels[i];
     m_pHistogram[r]++;
  }
  //下面计算每一个灰度点在图像中出现的概率
  var size =width *height;
  for(i=0; i<256; i++){
     m_pFstdHistogram[i] = m_pHistogram[i] / size;
  }
  //下面开始计算m_pFGrayAccu和m_pFGrayAve和m_pAverage的值
  for(i=0; i<256; i++){
     for(j=0; j<=i; j++){
       //计算m_pFGaryAccu[256]
   m_pFGrayAccu[i] += m_pFstdHistogram[j];
   //计算m_pFGrayAve[256]
   m_pFGrayAve[i] += j * m_pFstdHistogram[j];
     }
     //计算平均值
   m_pAverage += i * m_pFstdHistogram[i];
  }
  //下面开始就算OSTU的值，从0-255个值中分别计算ostu并寻找出最大值作为分割阀值
  for (i = 0 ; i < 256 ; i++){
   temp = (m_pAverage * m_pFGrayAccu[i] - m_pFGrayAve[i]) 
        * (m_pAverage * m_pFGrayAccu[i] - m_pFGrayAve[i]) 
        / (m_pFGrayAccu[i] * (1 - m_pFGrayAccu[i]));
   if (temp > fMax)
   {
     fMax = temp;
     nThresh = i;
   }
 }
return nThresh
},
